<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/04/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very
first post. Check <a href="https://hexo.io/docs/">documentation</a> for
more info. If you get any problems when using Hexo, you can find the
answer in <a
href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or
you can ask me on <a
href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>线段树学习笔记</title>
    <url>/2024/04/25/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>请注意，本文默认大家学过单改区查的基础线段树（包括动态开点）。</p>
<h3 id="区间修改懒标记lazy-tag">区间修改：懒标记（lazy-tag）</h3>
<details class="note info no-icon"><summary><p><a href="https://www.luogu.com.cn/problem/P3372">【模板】线段树
1</a></p>
</summary>
<p>题目描述</p>
<p>已知一个数列，你需要进行下面两种操作：</p>
<ol type="1">
<li>将某区间每一个数加上 <span class="math inline">\(k\)</span>。</li>
<li>求出某区间每一个数的和。</li>
</ol>
<p>输入格式</p>
<p>第一行包含两个整数 <span class="math inline">\(n,
m\)</span>，分别表示该数列数字的个数和操作的总个数。</p>
<p>第二行包含 <span class="math inline">\(n\)</span>
个用空格分隔的整数，其中第 <span class="math inline">\(i\)</span>
个数字表示数列第 <span class="math inline">\(i\)</span> 项的初始值。</p>
<p>接下来 <span class="math inline">\(m\)</span> 行每行包含 <span
class="math inline">\(3\)</span> 或 <span
class="math inline">\(4\)</span> 个整数，表示一个操作，具体如下：</p>
<ol type="1">
<li><code>1 x y k</code>：将区间 <span class="math inline">\([x,
y]\)</span> 内每个数加上 <span class="math inline">\(k\)</span>。</li>
<li><code>2 x y</code>：输出区间 <span class="math inline">\([x,
y]\)</span> 内每个数的和。</li>
</ol>
<p>输出格式</p>
<p>输出包含若干行整数，即为所有操作 2 的结果。</p>
<p>样例输入 #1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 5</span><br><span class="line">1 5 4 2 3</span><br><span class="line">2 2 4</span><br><span class="line">1 2 3 2</span><br><span class="line">2 3 4</span><br><span class="line">1 1 5 1</span><br><span class="line">2 1 4</span><br></pre></td></tr></table></figure>
<p>样例输出 #1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">11</span><br><span class="line">8</span><br><span class="line">20</span><br></pre></td></tr></table></figure>
<p>提示</p>
<p>对于 <span class="math inline">\(100\%\)</span> 的数据：<span
class="math inline">\(1 \le n, m \le {10}^5\)</span>。</p>

</details>
<p>很明显，如果用暴力进行区间修改，不能通过。</p>
<p>那么引入 lazy-tag。</p>
<p>首先，先介绍 lazy-tag 的概念：</p>
<p>对于每个有 lazy-tag
的节点，在只有需要用到自己的子节点时才会把修改的命令（lazy-tag）交给子节点。</p>
<p>lazy-tag 用一个叫做 <code>push_down</code> 的操作下放修改操作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">p_d_</span><span class="params">(<span class="type">long</span> <span class="type">long</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> L=u&lt;&lt;<span class="number">1</span>,R=u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">	t[L].sum+=t[u].y*(t[L].r-t[L].l+<span class="number">1</span>);<span class="comment">//处理左子树总和</span></span><br><span class="line">	t[R].sum+=t[u].y*(t[R].r-t[R].l+<span class="number">1</span>);<span class="comment">//右子树</span></span><br><span class="line">	t[L].y+=t[u].y;<span class="comment">//标记下放</span></span><br><span class="line">	t[R].y+=t[u].y;<span class="comment">//同上</span></span><br><span class="line">	t[u].y=<span class="number">0</span>;<span class="comment">//清零，代表下放结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，<code>y</code> 就是 lazy-tag。</p>
<p>第二，<code>up_date</code> 函数在符合
<code>t[u].l&gt;=l&amp;&amp;t[u].r&lt;=r</code> 时，将 lazy-tag
加上此次加操作的值，并增加此区间总和。</p>
<p>若不符合，则进行 <code>push_down</code>
操作，为递归左右子树铺垫。</p>
<p>第三，<code>query</code> 函数在
<code>t[u].l&gt;=l&amp;&amp;t[u].r&lt;=r</code> 不成立时，也需进行
<code>push_down</code> 操作，原因同上。</p>
<p>显然，此时复杂度为 <span class="math inline">\(O(mlogn)\)</span></p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        code
    </div>
    <div class='spoiler-content'>
        <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n,m,x,y;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> k;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">500010</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> l,r,sum,y;</span><br><span class="line">&#125;t[<span class="number">500010</span>&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">p_u_</span><span class="params">(<span class="type">long</span> <span class="type">long</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[u].sum=t[u&lt;&lt;<span class="number">1</span>].sum+t[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">p_d_</span><span class="params">(<span class="type">long</span> <span class="type">long</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> L=u&lt;&lt;<span class="number">1</span>,R=u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">	t[L].sum+=t[u].y*(t[L].r-t[L].l+<span class="number">1</span>);</span><br><span class="line">	t[R].sum+=t[u].y*(t[R].r-t[R].l+<span class="number">1</span>);</span><br><span class="line">	t[L].y+=t[u].y;</span><br><span class="line">	t[R].y+=t[u].y;</span><br><span class="line">	t[u].y=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">b_</span><span class="params">(<span class="type">long</span> <span class="type">long</span> u,<span class="type">long</span> <span class="type">long</span> l,<span class="type">long</span> <span class="type">long</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[u].l=l,t[u].r=r;</span><br><span class="line">	<span class="keyword">if</span>(l==r)</span><br><span class="line">	&#123;</span><br><span class="line">		t[u].sum=a[l];</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">b_</span>(u&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">	<span class="built_in">b_</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">	<span class="built_in">p_u_</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">u_d_</span><span class="params">(<span class="type">long</span> <span class="type">long</span> u,<span class="type">long</span> <span class="type">long</span> l,<span class="type">long</span> <span class="type">long</span> r,<span class="type">long</span> <span class="type">long</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(t[u].l&gt;=l&amp;&amp;t[u].r&lt;=r)</span><br><span class="line">	&#123;</span><br><span class="line">		t[u].sum+=c*(t[u].r-t[u].l+<span class="number">1</span>);</span><br><span class="line">		t[u].y+=c;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">p_d_</span>(u);</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> mid=(t[u].l+t[u].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=mid)<span class="built_in">u_d_</span>(u&lt;&lt;<span class="number">1</span>,x,y,c);</span><br><span class="line">	<span class="keyword">if</span>(r&gt;mid) <span class="built_in">u_d_</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,y,c);</span><br><span class="line">	<span class="built_in">p_u_</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">q_</span><span class="params">(<span class="type">long</span> <span class="type">long</span> u,<span class="type">long</span> <span class="type">long</span> l,<span class="type">long</span> <span class="type">long</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=t[u].l&amp;&amp;r&gt;=t[u].r)<span class="keyword">return</span> t[u].sum;</span><br><span class="line">	<span class="built_in">p_d_</span>(u);</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> mid=(t[u].l+t[u].r)&gt;&gt;<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=mid)ans+=<span class="built_in">q_</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">if</span>(r&gt;mid)ans+=<span class="built_in">q_</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">b_</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;k;</span><br><span class="line">		<span class="keyword">if</span>(k==<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cin&gt;&gt;x&gt;&gt;y&gt;&gt;k;</span><br><span class="line">			<span class="built_in">u_d_</span>(<span class="number">1</span>,x,y,k);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">			cout&lt;&lt;<span class="built_in">q_</span>(<span class="number">1</span>,x,y)&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

    </div>
</div>
<h3 id="权值线段树">权值线段树</h3>
<p>普通的线段树，记录的是数组中当前区间的各种信息。</p>
<p>权值线段树，则记录的是每种数据出现的次数。</p>
<p>如：数组为 <code>1 1 4 5 1 4</code></p>
<p>则其出现次数为（从 <span class="math inline">\(0\)</span>
开始）<code>0 3 0 0 2 1</code>。</p>
<h3 id="线段树合并">线段树合并</h3>
<p>前置知识：权值线段树（一般线段树合并合并的是权值线段树）。</p>
<blockquote>
<p>线段树合并是指建立一棵新的线段树，这棵线段树的每个节点都是两棵原线段树对应节点合并后的结果。它常常被用于维护树上或是图上的信息。——OI
wiki</p>
</blockquote>
<p>如果每次合并都新开一棵满树，时间、空间都无法接受。</p>
<p>那么，就需要本文开头提到的前置知识动态开点。</p>
<p>设需要合并的两棵树分别叫 <span class="math inline">\(T1\)</span> 和
<span class="math inline">\(T2\)</span>。</p>
<p>从上往下（即从 <span class="math inline">\(1\)</span>
号节点开始递归向下），对于每个节点，若 <span
class="math inline">\(T1\)</span> 上无此节点，就只加入 <span
class="math inline">\(T2\)</span> 上的此节点。反之亦然。</p>
<p>如果都有此节点，若是叶子节点，直接合并所有信息。</p>
<p>若否，通过子节点的返回（返回左儿子、右儿子）更新。</p>
<p>OI-wiki
上对其时间复杂度的证明不严谨，读者可以在写的时候自己证其时间复杂度。</p>
<h3 id="例题">例题</h3>
<h4 id="t1">T1</h4>
<p><img
src="https://cdn.luogu.com.cn/upload/image_hosting/kxlc0zkg.png" /></p>
<p>首先思路是暴力（二维前缀和），然而会时间和空间超限。</p>
<p>优化：因为“星星按y坐标增序给出，y坐标相同的按x坐标增序给出”，所以只需查找从
<span class="math inline">\(0\)</span>
高度到此高度范围内共有多少颗星星（因为保证 <span
class="math inline">\(y\)</span> 增序了），求和即可。</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        code
    </div>
    <div class='spoiler-content'>
        <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> esp 1e-8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 999999999999999999</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i,a,b,g) for(LL i=a;i&lt;=b;i+=g)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rem(i,a,b,g) for(LL i=a;i&gt;=b;i-=g)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> repn(i,a,b,g) for(LL i=a;i&lt;b;i+=g)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> remn(i,a,b,g) for(LL i=a;i&gt;b;i-=g)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pll pair<span class="string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mkp(x,y) make_pair(x,y)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i128 __int128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc (u&lt;&lt;1|1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(i128 &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	i128 f=<span class="number">1</span>;</span><br><span class="line">	x=<span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;</span><br><span class="line">		ch=<span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		ch=<span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writing</span><span class="params">(i128 x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">10</span>)<span class="built_in">writing</span>(x/<span class="number">10</span>);</span><br><span class="line">	<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(i128 x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">		x=-x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">writing</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">LL n,x[<span class="number">1000010</span>],y[<span class="number">1000010</span>];</span><br><span class="line">LL k;</span><br><span class="line">LL a[<span class="number">1000010</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line">	LL l,r,sum,y;</span><br><span class="line">&#125;t[<span class="number">1000010</span>&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">p_u_</span><span class="params">(LL u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[u].sum=t[u&lt;&lt;<span class="number">1</span>].sum+t[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">p_d_</span><span class="params">(LL u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LL L=u&lt;&lt;<span class="number">1</span>,R=u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">	t[L].sum+=t[u].y*(t[L].r-t[L].l+<span class="number">1</span>);</span><br><span class="line">	t[R].sum+=t[u].y*(t[R].r-t[R].l+<span class="number">1</span>);</span><br><span class="line">	t[L].y+=t[u].y;</span><br><span class="line">	t[R].y+=t[u].y;</span><br><span class="line">	t[u].y=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">b_</span><span class="params">(LL u,LL l,LL r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[u].l=l;</span><br><span class="line">	t[u].r=r;</span><br><span class="line">	<span class="keyword">if</span>(l==r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LL mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">b_</span>(u&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">	<span class="built_in">b_</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">	<span class="built_in">p_u_</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">u_d_</span><span class="params">(LL u,LL l,LL r,LL c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(t[u].l&gt;=l&amp;&amp;t[u].r&lt;=r)</span><br><span class="line">	&#123;</span><br><span class="line">		t[u].sum+=c*(t[u].r-t[u].l+<span class="number">1</span>);</span><br><span class="line">		t[u].y+=c;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">p_d_</span>(u);</span><br><span class="line">	LL mid=(t[u].l+t[u].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=mid)<span class="built_in">u_d_</span>(u&lt;&lt;<span class="number">1</span>,l,r,c);</span><br><span class="line">	<span class="keyword">if</span>(r&gt;mid) <span class="built_in">u_d_</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,c);</span><br><span class="line">	<span class="built_in">p_u_</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">q_</span><span class="params">(LL u,LL l,LL r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=t[u].l&amp;&amp;r&gt;=t[u].r)<span class="keyword">return</span> t[u].sum;</span><br><span class="line">	<span class="built_in">p_d_</span>(u);</span><br><span class="line">	LL mid=(t[u].l+t[u].r)&gt;&gt;<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=mid)ans+=<span class="built_in">q_</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">if</span>(r&gt;mid)ans+=<span class="built_in">q_</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">LL sum[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="built_in">b_</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">320000</span>);</span><br><span class="line">	<span class="built_in">rep</span>(i,<span class="number">1</span>,n,<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;x[i]&gt;&gt;y[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i,<span class="number">1</span>,n,<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		LL u=x[i]+<span class="number">1</span>;</span><br><span class="line">		LL v=<span class="built_in">q_</span>(<span class="number">1</span>,<span class="number">1</span>,u);</span><br><span class="line">		<span class="built_in">u_d_</span>(<span class="number">1</span>,u,u,<span class="number">1</span>);</span><br><span class="line">		sum[v+<span class="number">1</span>]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i,<span class="number">1</span>,n,<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;sum[i]&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

    </div>
</div>
<h4 id="t2"><a href="https://www.luogu.com.cn/problem/P5057">T2</a></h4>
<p>很明显，因为是“区查单改”且是较为特殊的异或，我们需要把“异或次数”作为
lazy-tag。</p>
<p>同时因为只有 <span class="math inline">\(1\)</span> 和 <span
class="math inline">\(0\)</span>，所以 lazy-tag 每次异或（即 <span
class="math inline">\(+1\mod 2\)</span>）即可。</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        code
    </div>
    <div class='spoiler-content'>
        <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> esp 1e-8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 999999999999999999</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i,a,b,g) for(LL i=a;i&lt;=b;i+=g)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rem(i,a,b,g) for(LL i=a;i&gt;=b;i-=g)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> repn(i,a,b,g) for(LL i=a;i&lt;b;i+=g)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> remn(i,a,b,g) for(LL i=a;i&gt;b;i-=g)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pll pair<span class="string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mkp(x,y) make_pair(x,y)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i128 LL</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc (u&lt;&lt;1|1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(i128 &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	i128 f=<span class="number">1</span>;</span><br><span class="line">	x=<span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;</span><br><span class="line">		ch=<span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		ch=<span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writing</span><span class="params">(i128 x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">10</span>)<span class="built_in">writing</span>(x/<span class="number">10</span>);</span><br><span class="line">	<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(i128 x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">		x=-x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">writing</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">LL n,m,x,y,k,a[<span class="number">100010</span>],tt[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line">	LL l,r,sum,y;</span><br><span class="line">&#125;t[<span class="number">100010</span>&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">p_u_</span><span class="params">(LL u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[u].sum=t[u&lt;&lt;<span class="number">1</span>].sum+t[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">p_d_</span><span class="params">(LL u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LL L=u&lt;&lt;<span class="number">1</span>,R=u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">	t[L].sum=t[L].r-t[L].l+<span class="number">1</span>-t[L].sum;</span><br><span class="line">	t[R].sum=t[R].r-t[R].l+<span class="number">1</span>-t[R].sum;</span><br><span class="line">	t[L].y^=<span class="number">1</span>;</span><br><span class="line">	t[R].y^=<span class="number">1</span>;</span><br><span class="line">	t[u].y=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">b_</span><span class="params">(LL u,LL l,LL r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[u].l=l,t[u].r=r;</span><br><span class="line">	<span class="keyword">if</span>(l==r)</span><br><span class="line">	&#123;</span><br><span class="line">		t[u].sum=tt[l<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LL mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">b_</span>(u&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">	<span class="built_in">b_</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">	<span class="built_in">p_u_</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">u_d_</span><span class="params">(LL u,LL l,LL r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(t[u].l&gt;=l&amp;&amp;t[u].r&lt;=r)</span><br><span class="line">	&#123;</span><br><span class="line">		t[u].sum=t[u].r-t[u].l+<span class="number">1</span>-t[u].sum;</span><br><span class="line">		t[u].y^=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(t[u].y)<span class="built_in">p_d_</span>(u);</span><br><span class="line">	LL mid=(t[u].l+t[u].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=mid)<span class="built_in">u_d_</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">if</span>(r&gt;mid)<span class="built_in">u_d_</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="built_in">p_u_</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">q_</span><span class="params">(LL u,LL l,LL r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=t[u].l&amp;&amp;r&gt;=t[u].r)<span class="keyword">return</span> t[u].sum;</span><br><span class="line">	<span class="keyword">if</span>(t[u].y)<span class="built_in">p_d_</span>(u);</span><br><span class="line">	LL mid=(t[u].l+t[u].r)&gt;&gt;<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=mid)ans+=<span class="built_in">q_</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">if</span>(r&gt;mid)ans+=<span class="built_in">q_</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">read</span>(n);</span><br><span class="line">	<span class="built_in">read</span>(m);</span><br><span class="line">	<span class="built_in">b_</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">read</span>(k);</span><br><span class="line">		<span class="keyword">if</span>(k==<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">read</span>(x);</span><br><span class="line">			<span class="built_in">read</span>(y);</span><br><span class="line">			<span class="built_in">u_d_</span>(<span class="number">1</span>,x,y);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">read</span>(x);</span><br><span class="line">			y=x;</span><br><span class="line">			<span class="built_in">write</span>(<span class="built_in">q_</span>(<span class="number">1</span>,x,y));</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

    </div>
</div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>线段树</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
</search>
