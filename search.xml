<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/04/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very
first post. Check <a href="https://hexo.io/docs/">documentation</a> for
more info. If you get any problems when using Hexo, you can find the
answer in <a
href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or
you can ask me on <a
href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>线段树学习笔记</title>
    <url>/2024/04/22/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>请注意，本文默认大家学过单改区查的基础线段树。</p>
<h3 id="懒标记lazy-tag">1. 懒标记（lazy-tag）</h3>
<details class="note info no-icon"><summary><p>【模板】线段树 1</p>
</summary>
<h2 id="题目描述">题目描述</h2>
<p>如题，已知一个数列，你需要进行下面两种操作：</p>
<ol type="1">
<li>将某区间每一个数加上 <span class="math inline">\(k\)</span>。</li>
<li>求出某区间每一个数的和。</li>
</ol>
<h2 id="输入格式">输入格式</h2>
<p>第一行包含两个整数 <span class="math inline">\(n,
m\)</span>，分别表示该数列数字的个数和操作的总个数。</p>
<p>第二行包含 <span class="math inline">\(n\)</span>
个用空格分隔的整数，其中第 <span class="math inline">\(i\)</span>
个数字表示数列第 <span class="math inline">\(i\)</span> 项的初始值。</p>
<p>接下来 <span class="math inline">\(m\)</span> 行每行包含 <span
class="math inline">\(3\)</span> 或 <span
class="math inline">\(4\)</span> 个整数，表示一个操作，具体如下：</p>
<ol type="1">
<li><code>1 x y k</code>：将区间 <span class="math inline">\([x,
y]\)</span> 内每个数加上 <span class="math inline">\(k\)</span>。</li>
<li><code>2 x y</code>：输出区间 <span class="math inline">\([x,
y]\)</span> 内每个数的和。</li>
</ol>
<h2 id="输出格式">输出格式</h2>
<p>输出包含若干行整数，即为所有操作 2 的结果。</p>
<h2 id="样例-1">样例 #1</h2>
<h3 id="样例输入-1">样例输入 #1</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 5</span><br><span class="line">1 5 4 2 3</span><br><span class="line">2 2 4</span><br><span class="line">1 2 3 2</span><br><span class="line">2 3 4</span><br><span class="line">1 1 5 1</span><br><span class="line">2 1 4</span><br></pre></td></tr></table></figure>
<h3 id="样例输出-1">样例输出 #1</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">11</span><br><span class="line">8</span><br><span class="line">20</span><br></pre></td></tr></table></figure>
<h2 id="提示">提示</h2>
<p>对于 <span class="math inline">\(30\%\)</span> 的数据：<span
class="math inline">\(n \le 8\)</span>，<span class="math inline">\(m
\le 10\)</span>。<br />
对于 <span class="math inline">\(70\%\)</span> 的数据：<span
class="math inline">\(n \le {10}^3\)</span>，<span
class="math inline">\(m \le {10}^4\)</span>。<br />
对于 <span class="math inline">\(100\%\)</span> 的数据：<span
class="math inline">\(1 \le n, m \le {10}^5\)</span>。</p>
<p>保证任意时刻数列中所有元素的绝对值之和 <span
class="math inline">\(\le {10}^{18}\)</span>。</p>
<p><strong>【样例解释】</strong></p>
<p><img src="https://cdn.luogu.com.cn/upload/pic/2251.png" /></p>

</details>
<p>很明显，如果用暴力进行区间修改，不能通过。</p>
<p>以下是我的代码，我将对着代码讲述 lazy-tag。</p>
<details class="note info no-icon"><summary><p>代码</p>
</summary>
<p>#include&lt;stdio.h&gt; #include&lt;bits/stdc++.h&gt; using namespace
std; long long n,m,x,y; long long k; long long a[500010]; struct tree {
long long l,r,sum,y; }t[500010&lt;&lt;2]; void p_u_(long long u) {
t[u].sum=t[u&lt;&lt;1].sum+t[u&lt;&lt;1|1].sum; } void p_d_(long long u)
{ long long L=u&lt;&lt;1,R=u&lt;&lt;1|1;
t[L].sum+=t[u].y<em>(t[L].r-t[L].l+1);
t[R].sum+=t[u].y</em>(t[R].r-t[R].l+1); t[L].y+=t[u].y; t[R].y+=t[u].y;
t[u].y=0; } void b_(long long u,long long l,long long r) {
t[u].l=l,t[u].r=r; if(l==r) { t[u].sum=a[l]; return; } long long
mid=l+r&gt;&gt;1; b_(u&lt;&lt;1,l,mid); b_(u&lt;&lt;1|1,mid+1,r);
p_u_(u); } void u_d_(long long u,long long l,long long r,long long c) {
if(t[u].l&gt;=l&amp;&amp;t[u].r&lt;=r) { t[u].sum+=c*(t[u].r-t[u].l+1);
t[u].y+=c; return; } p_d_(u); long long mid=(t[u].l+t[u].r)&gt;&gt;1;
if(l&lt;=mid)u_d_(u&lt;&lt;1,x,y,c); if(r&gt;mid)
u_d_(u&lt;&lt;1|1,x,y,c); p_u_(u); } long long q_(long long u,long long
l,long long r) { if(l&lt;=t[u].l&amp;&amp;r&gt;=t[u].r)return t[u].sum;
p_d_(u); long long mid=(t[u].l+t[u].r)&gt;&gt;1,ans=0;
if(l&lt;=mid)ans+=q_(u&lt;&lt;1,l,r);
if(r&gt;mid)ans+=q_(u&lt;&lt;1|1,l,r); return ans; } int main() {
cin&gt;&gt;n&gt;&gt;m; for(long long i=1;i&lt;=n;i++) { cin&gt;&gt;a[i];
} b_(1,1,n); while(m--) { cin&gt;&gt;k; if(k==1) {
cin&gt;&gt;x&gt;&gt;y&gt;&gt;k; u_d_(1,x,y,k); } else {
cin&gt;&gt;x&gt;&gt;y; cout&lt;&lt;q_(1,x,y)&lt;&lt;endl; } } return 0;
}</p>

</details>
<p>首先，先介绍 lazy-tag 的概念：</p>
<p>对于每个有 lazy-tag
的节点，在只有需要用到自己的子节点时才会把修改的命令（lazy-tag）交给子节点。</p>
<p>lazy-tag 用一个叫做 <code>push_down</code> 的操作下放修改操作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">p_d_</span><span class="params">(<span class="type">long</span> <span class="type">long</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> L=u&lt;&lt;<span class="number">1</span>,R=u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">	t[L].sum+=t[u].y*(t[L].r-t[L].l+<span class="number">1</span>);<span class="comment">//处理左子树总和</span></span><br><span class="line">	t[R].sum+=t[u].y*(t[R].r-t[R].l+<span class="number">1</span>);<span class="comment">//右子树</span></span><br><span class="line">	t[L].y+=t[u].y;<span class="comment">//标记下放</span></span><br><span class="line">	t[R].y+=t[u].y;<span class="comment">//同上</span></span><br><span class="line">	t[u].y=<span class="number">0</span>;<span class="comment">//清零，代表下放结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，<code>y</code> 就是 lazy-tag。</p>
<p>第二，<code>up_date</code> 函数在符合
<code>t[u].l&gt;=l&amp;&amp;t[u].r&lt;=r</code> 时，将 lazy-tag
加上此次加操作的值，并增加此区间总和。</p>
<p>若不符合，则进行 <code>push_down</code>
操作，为递归左右子树铺垫。</p>
<p>第三，<code>query</code> 函数在
<code>t[u].l&gt;=l&amp;&amp;t[u].r&lt;=r</code> 不成立时，也需进行
<code>push_down</code> 操作，原因同上。</p>
]]></content>
      <categories>
        <category>线段树</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
</search>
